############################################################Python Code Challenges: Control Flouw
1. Not Sum To Ten
You are given two numbers stored in num1 and num2. If the sum of num1 and num2 is NOT equal to 10, then store True into a variable called not_ten, otherwise store False in not_ten.
2. Over Budget
You are given a monthly budget and some expenses and need to check if the sum of the expenses goes over budget!

First, store the total of all expenses into a variable called total.

Next, check if the total is greater than the budget. If it is, store True into a variable called over_budget, otherwise store False in over_budget.
3. Large Power
For the next code challenge, let’s add functions to the mix! We create a function that tests whether the result of taking the power of one number to another number provides an answer that is greater than 5000. We will use a conditional statement to return True if the result is greater than 5000 or return False if it is not. In order to accomplish this, we will need the following steps:

Define the function to accept two input parameters called base and exponent
Calculate the result of base to the power of exponent
Use an if statement to test if the result is greater than 5000. If it is then return True. Otherwise, return False

4. Twice As Large
In this challenge, we will determine if one number is twice as large as another number. To do this, we will compare the first number with two times the second number. Here are the steps:

Define our function with two inputs num1 and num2
Multiply the second input by 2
Use an if statement to compare the result of the last calculation with the first input
If num1 is greater then return True otherwise return False
5. Divisible By Ten
############################################################Control Flow (Advanced)
1. In Range
Let’s start the advanced challenge problems by testing if a number falls within a certain range. We will accept three parameters where the first parameter is the number we are testing, the second parameter is the lower bound and the third parameter is the upper bound of our range. These are the steps required:

Define the function to accept three numbers as parameters
Test if the number is greater than or equal to the lower bound and less than or equal to the upper bound
If this is true, return True, otherwise, return False
  def in_range(num, lower, upper):
  if (num >= lower) and (num <= upper):
    return True
  else:
    return False

  2. Same Name
We need to write a program that checks different names and determines if they are equal. We need to accept two strings and compare them. Here are the steps:

Define the function to accept two strings, your_name and my_name
Test if the two strings are equal
Return True if they are equal, otherwise return False

3. Always False
There are some situations that you normally want to avoid when programming using conditional statements. One example is a contradiction. This occurs when your condition will always be false no matter what value you pass into it. Let’s create an example of a function that contains a contradiction. It will contain a few steps:

Define the function to accept a single parameter called num
Use a combination of <, > and and to create a contradiction in an if statement.
If the condition is true, return True, otherwise return False. The trick here is that because we’ve written a contradiction, the condition should never be true, so we should expect to always return False.
def always_false(num):
  if (num > 0 and num < 0):
    return True
  else:
    return False
4. Movie Review
We want to create a function that will help us rate movies. Our function will split the ratings into different ranges and tell the user how the movie was based on the movie’s rating. Here are the steps needed:

Define our function to accept a single number called rating
If the rating is equal to or less than 5, return "Avoid at all costs!"
If the rating was less than 9, return "This one was fun."
If neither of the if statement conditions were met, return "Outstanding!"
def movie_review(rating):
  if(rating <= 5):
    return "Avoid at all costs!"
  if(rating < 9):
    return "This one was fun."
  return "Outstanding!"
5. Max Number
For the final challenge, we are going to select which number from three input values is the greatest using conditional statements. To do this, we need to check the different combinations of values to see which number is greater than the other two. Here is what we need to do:

Define a function that has three input parameters, num1, num2, and num3
Test if num1 is greater than the other two numbers
If so, return num1
Test if num2 is greater than the other two numbers
If so, return num2
Test if num3 is greater than the other two numbers
If so, return num3
If there was a tie between the two largest numbers, then return "It's a tie!"

############################################################ Python Code Challenges: Lists

1. Append Size
For the first code challenge, we are going to calculate the length of an input list and append it to the end of the original list. For example, if we have the input list [23, 42, 108], which is of length 3, the output list should be [23, 42, 108, 3]. Similarly, the output for the input list [1, 23] should be [1, 23, 2].

Here is what you need to do:

Define a function append_size() that accepts a list as its input.
Get the length of the input list.
Append the length of the list to the end of the original list.
Return the modified list.

def append_size(my_list):
  my_list.append(len(my_list))
  return my_list
2. Append Sum
For the next challenge, let’s create a function that calculates the sum of the last two elements of an input list and appends it to the end of the original list. After doing so, it repeats this process two more times and returns the resulting list.

For example, for the input list [1, 1, 2], the output list should be [1, 1, 2, 3, 5, 8]. Similarly, the output for the input list [1, 23] should be [1, 23, 24, 47, 71].

To complete the challenge, you need to implement the following:

Define the function append_sum() to accept a list as its input argument.
Add the last and second-to-last elements of the input list.
Append the calculated sum to the end of the input list.
Repeat the previous two steps two more times for the modified list.
Return the modified list.

def append_sum(my_list):
  if len(my_list) < 2:
    return "Error"
  for _ in range(3):
    two_el_sum = my_list[-2] + my_list[-1]
    my_list.append(two_el_sum)
  return my_list
3. Larger List
Let’s say we are working with two conveyor belts that contain items represented by a numerical ID. If one conveyor belt contains more items than the other, then we need to return the ID of the last item on that belt. In the case where they have the same number of items, return the last item from the first conveyor belt.

In our code, we can represent the id of the items using numbers and conveyor belts using lists. For instance, if we have two lists, [23, 12, 21] and [1, 23], representing the id of the items at two conveyor belts, the output will be 21. Similarly, for input lists [1, 7, 2, 3, 17] and [1, 23, 24, 47, 71, 83], the output will be 83. For input lists [23, 12, 21] and [1, 23, 25], the output will be 21 as both lists are of the same length.

Here are the steps you need to complete this code challenge:

Define a function that accepts two parameters for our two lists of numbers.
Check if the length of the first list is greater than or equal to the length of the second list.
If true, then return the last element from the first list. Otherwise, return the last element from the second list.

def larger_list(my_list1, my_list2):
  if len(my_list1) >= len(my_list2):
    return my_list1[-1]
  else:
    return my_list2[-1]

4. More Than N
Our factory produces a variety of different flavored snacks. The different types of snacks are represented by their id and are kept on a conveyor belt. We want to check if we have enough items of a certain snack in our inventory. For this, we need to write a Python function that does the following.

The function should accept a list of numbers representing the ids of snack on the conveyor belt as its first input, the id of snack we are looking for as its second input, and the desired number of that type of snack on the conveyor belt as its third input.
The function should return True if the snack we are searching for appears more times in the list than the desired number given in the third parameter. Otherwise, it should return False.
Following are the steps we need to implement the above scenario:

Define the function to accept three parameters: a list of numbers, a number to look for, and a number for the number of instances.
Count the number of occurrences of item i.e. the second parameter in my_list i.e. the first parameter.
If the number of occurrences is greater than n i.e. the third parameter, return True. Otherwise, return False.

def more_than_n(my_list, item, n):
  n_item = my_list.count(item)
  if n_item > n:
    return True
  return False
5. Combine Sort
Finally, let’s create a function that combines two different lists together and then sorts them. To do this, we can combine the lists with an operation and then sort using a function call. Here are the steps we need to use:

Define the function to accept two parameters, one for each list.
Combine the two lists using the + operator.
Sort the resultant list after concatenation.
Return the sorted list.
def combine_sort(my_list1, my_list2):
  my_list1 = my_list1 + my_list2

  my_list1.sort()

  return my_list1

############################################################Python Code Challenges: Loops
1. Divisible By Ten
Let’s start our code challenges with a function that counts how many numbers are divisible by ten from a list of numbers. This function will accept a list of numbers as an input parameter and use a loop to check each of the numbers in the list. Every time a number is divisible by 10, a counter will be incremented and the final count will be returned. These are the steps we need to complete this:

Define the function to accept one input parameter called nums
Initialize a counter to 0
Loop through every number in nums
Within the loop, if any of the numbers are divisible by 10, increment our counter
Return the final counter value
def divisible_by_ten(nums):
  counter = 0
  for num in nums:
    if num % 10 == 0:
      counter += 1
  return counter
2. Greetings
You are invited to a social gathering, but you are tired of greeting everyone there. Luckily we can create a function to accomplish this task for us. In this challenge, we will take a list of names and prepend the string 'Hello, ' before each name. This will require a few steps:

Define the function to accept a list of strings as a single parameter called names
Create a new list of strings
Loop through each name in names
Within the loop, concatenate 'Hello, ' and the current name together and append this new string to the new list of strings
Afterwards, return the new list of strings
def add_greetings(names):
  new_list = []
  for name in names:
    new_list.append('Hello, ' + name)
  return new_list

3. Delete Starting Even Numbers
Let’s try a tricky challenge involving removing elements from a list. This function will repeatedly remove the first element of a list until it finds an odd number or runs out of elements. It will accept a list of numbers as an input parameter and return the modified list where any even numbers at the beginning of the list are removed. To do this, we will need the following steps:

Define our function to accept a single input parameter my_list which is a list of numbers
Loop through every number in the list if there are still numbers in the list and if we haven’t hit an odd number yet
Within the loop, if the first number in the list is even, then remove the first number of the list
Once we hit an odd number or we run out of numbers, return the modified list
def delete_starting_evens(my_list):
  copy_list = my_list[:]
  for num in my_list:
    if num % 2 == 0:
      copy_list.pop(0)
    else:
      break
  return copy_list
4. Odd Indices
This next function will give us the values from a list at every odd index. We will need to accept a list of numbers as an input parameter and loop through the odd indices instead of the elements. Here are the steps needed:

Define the function header to accept one input which will be our list of numbers
Create a new list which will hold our values to return
Iterate through every odd index until the end of the list
Within the loop, get the element at the current odd index and append it to our new list
Return the list of elements which we got from the odd indices.
def odd_indices(my_list):
  odd_list = []
  for i in my_list[1::2]:
    odd_list.append(i)
  return odd_list

5. Exponents
In this challenge, we will be using nested loops in order to raise a list of numbers to the power of a list of other numbers. What this means is that for every number in the first list, we will raise that number to the power of every number in the second list. If you provide the first list with 2 elements and the second list with 3 numbers, then there will be 6 final answers. Let’s look at the steps we need:

Define the function to accept two lists of numbers, bases and powers
Create a new list that will contain our answers
Create a loop that iterates through every base in bases
Within that loop, create another loop that iterates through every power in power
Within that nested loop, append the result of the current base raised to the current power.
After all iterations of both loops are complete, return the list of answers
def exponents(bases, powers):
  results = []
  for base in bases:
    for power in powers:
      results.append(base ** power)
  return results

############################################################Python Code Challenges: Loops (Advanced)
1. Larger Sum
We are going to start our advanced challenge problems by calculating which list of two inputs has the larger sum. We will iterate through each of the list and calculate the sums, afterwards we will compare the two and return which one has a greater sum. Here are the steps we need:

Define the function to accept two input parameters: lst1 and lst2
Create two variables to record the two sums
Loop through the first list and add up all of the numbers
Loop through the second list and add up all of the numbers
Compare the first and second sum and return the list with the greater sum
  
  sum1 = sum(lst1)
  sum2 = sum(lst2)
  if sum1 > sum2:
    return lst1
  elif sum1 < sum2:
    return lst2
  return lst1
2. Over 9000
We are constructing a device that is able to measure the power level of our coding abilities and according to the device, it will be impossible for our power levels to be over 9000. Because of this, as we iterate through a list of power values we will count up each of the numbers until our sum reaches a value greater than 9000. Once this happens, we should stop adding the numbers and return the value where we stopped. In order to do this, we will need the following steps:

Define the function to accept a list of numbers
Create a variable to keep track of our sum
Iterate through every element in our list of numbers
Within the loop, add the current number we are looking at to our sum
Still within the loop, check if the sum is greater than 9000. If it is, end the loop
Return the value of the sum when we ended our loop
def over_nine_thousand(lst):
  sum = 0
  if len(lst) < 1:
    return 0
  for num in lst:
    sum += num
    if sum > 9000:
      return sum
  return sum
3. Max Num
Here is a more traditional coding problem for you. This function will be used to find the maximum number in a list of numbers. This can be accomplished using the max() function in python, but as a challenge, we are going to manually implement this function. Here is what we need to do:

Define the function to accept a list of numbers called nums
Set our default maximum value to be the first element in the list
Loop through every number in the list of numbers
Within the loop, if we find a number greater than our starting maximum, then replace the maximum with what we found.
Return the maximum number
def max_num(nums):
  max = nums[0]
  for num in nums:
    if num > max:
      max = num
  return max

4. Same Values
In this challenge, we need to find the indices in two equally sized lists where the numbers match. We will be iterating through both of them at the same time and comparing the values, if the numbers are equal, then we record the index. These are the steps we need to accomplish this:

Define our function to accept two lists of numbers
Create a new list to store our matching indices
Loop through each index to the end of either of our lists
Within the loop, check if our first list at the current index is equal to the second list at the current index. If so, append the index where they matched
Return our list of indices
def same_values(lst1, lst2):
  same_values = []
  for i in range(len(lst1)):
    if lst1[i] ==  lst2[i]:
      same_values.append(i)
  return same_values

5. Reversed List
For the final challenge, we are going to test two lists to see if the second list is the reverse of the first list. There are a few different ways to approach this, but we are going to try a method that iterates through each of the values in one direction for the first list and compares them against the values starting from the other direction in the second list. Here is what you need to do:

Define a function that has two input parameters for our lists
Loop through every index in one of the lists from beginning to end
Within the loop, compare the element in the first list at the current index against the element at the second list’s last index minus the current index. If there was a mismatch, then the lists aren’t reversed and we can return False
If the loop ended successfully, then we know the lists are reversed and we can return True.

def reversed_list(lst1, lst2):
  for i in range(len(lst1)):
    if lst1[i] != lst2[(len(lst2)-1)-i]:
      return False
  return True

############################################################Python Code Challenges: Dictionaries
1. Sum Values
For the first code challenge, we are going to look at only the values in a dictionary. This function should sum up all of the values from the key-value pairs in the dictionary. Here are the steps we need:

Define the function to accept one parameter for our dictionary
Create a variable to keep track of our sum
Loop through every value in the dictionary
Inside the loop, add each value to the sum
Return the sum
def sum_values(my_dictionary):
  counter = 0
  for i in my_dictionary:
    counter += my_dictionary[i]
  return counter
2. Even Keys
Next, we are going to do something similar, but we are going to use the keys in order to retrieve the values. Additionally, we are going to only look at every even key within the dictionary. Here are the steps:

Define the function to accept one parameter for our dictionary
Create a variable to keep track of our sum
Loop through every key in the dictionary
Inside the loop, if the key is even, add the value from the even key
After the loop, return the sum
def sum_even_keys(my_dictionary):
  total = 0
  for key in my_dictionary:
    if key % 2 == 0:
      total += my_dictionary[key]
  return total
3. Add Ten
Let’s loop through the keys again, but this time let’s modify the values within the dictionary. Our function should add 10 to every value in the dictionary and return the modified dictionary. Here is what we need to do:

Define the function to accept one parameter for our dictionary
Loop through every key in the dictionary
Retrieve the value using the key and add 10 to it. Make sure to re-save the new value to the original key.
After the loop, return the modified dictionary
def add_ten(my_dictionary):
  for key in my_dictionary:
      my_dictionary[key] += 10
  return my_dictionary
4. Values That Are Keys
We are making a program that will create a family tree. Using a dictionary, we want to return a list of all the children who are also parents of other children. Using dictionaries we can consider those people to be values which are also keys in our dictionary of family data. Here is what we need to do:

Define the function to accept one parameter for our dictionary
Create an empty list to hold the values we find
Loop through every value in the dictionary
Inside the loop, test if the current value is a key in the dictionary. If it is then append it to the list of values we found
After the loop, return the list of values which are also keys

def values_that_are_keys(my_dictionary):
  my_list = []
  for value in my_dictionary.values():
    if value in my_dictionary:
      my_list.append(value)
  return my_list
5. Largest Value
For the last challenge, we are going to create a function that is able to find the maximum value in the dictionary and return the associated key. This is a twist on the max algorithm since it is using a dictionary rather than a list. These are the steps:

Define the function to accept one parameter for our dictionary
Initialize the starting key to a very low number
Initialize the starting value to a very low number
Iterate through the dictionary’s key/value pairs.
Inside the loop, if the current value is larger than the current largest value, replace the largest key and largest value with the current ones you are looking at
Once you are done iterating through all key/value pairs, return the key which has the largest value

def max_key(my_dictionary):
  max_num = 0
  max_key = 0
  for key in my_dictionary:
    if my_dictionary[key] > max_num:
      max_num = my_dictionary[key]
      max_key = key
  return max_key
############################################################Python Code Challenges: Dictionaries (Advanced)
1. Word Length Dict
Let’s start by writing a function that creates a new dictionary based on a list of strings. The keys of our dictionary will be every string in our list of strings, while the values will be the length of each of the words in the string list. Here are the steps:

Define the function to accept one parameter for our list of strings
Create a new empty dictionary
Loop through every string in the list of strings
Inside the loop, add the string as a key and the length of the string as the value to the dictionary
After the loop, return the new dictionary
def word_length_dictionary(words):
  word_dict = {}
  for word in words:
    word_dict[word] = len(word)
  return word_dict
2. Frequency Count
This next function is similar, but instead of counting the length of each string in the list of strings, we will be counting the frequency of each string. This function will also accept a list of strings as input and return a new dictionary. Here is what we need to do:

Define the function to accept one parameter for our list of strings
Create a new empty dictionary
Loop through every string in the list of strings
Inside the loop, if the string is NOT already in our dictionary, store the string as a key with a value of 0 in our dictionary. Otherwise, if the string is already in our dictionary, increment the value by 1.
After the loop, return the new dictionary
def frequency_dictionary(words):
  freq_dict = {}
  for word in words:
    if word not in freq_dict:
      freq_dict[word] = 1
    else:
      freq_dict[word] += 1
  return freq_dict
3. Unique Values
Now let’s try reading a dictionary as input and finding how many values are unique. The function should return a number which is the count of all values from the dictionary without including duplicates. These are the steps:

Define the function to accept one parameter for our dictionary
Create a new empty list
Loop through every value in our dictionary
Inside the loop, if the value is not already in our list, append the value to our list
After the loop, return the length of our list
def unique_values(my_dictionary):
  unique_values = []
  for value in my_dictionary.values():
    if value not in unique_values:
      unique_values.append(value)
  return len(unique_values)
4. Count First Letter
This function accepts a dictionary where the keys are last names and the values are lists of first names of people who have that last name. We need to calculate the number of people who have the same first letter in their last name. Here are the steps we need:

Define the function to accept one parameter for our dictionary
Create a new empty dictionary called letters
Loop through every key in our names dictionary
Inside the loop, get the first letter of the last name we are looking at. If the first letter is not in our letter dictionary, add it as a key and set the value to the number of people that have that last name. Otherwise, if the first letter is already in our letter dictionary, increment the value stored with that key by the number of people that have that last name
After the loop, return the letters dictionary
def count_first_letter(names):
  last_name_counter = {}
  for last_name in names:
    if last_name[0] not in last_name_counter:
      last_name_counter[last_name[0]] = len(names[last_name])
    else:
      last_name_counter[last_name[0]] += len(names[last_name])
  return last_name_counter
############################################################Python Code Challenges: Classes
1. Setting Up Our Robot
Let’s begin by creating the class for our robot. We will begin by setting up the instance variables to keep track of important data related to the robot. Here are the steps we need to do:

Create a new class called DriveBot
Set up a basic constructor (no parameters needed)
Initialize three instance variables within our constructor which all default to 0: motor_speed, direction, and sensor_range
Coding question
class DriveBot:
  def __init__(self):
    self.motor_speed = 0
    self.direction = 0
    self.sensor_range  = 0

robot_1 = DriveBot()
robot_1.motor_speed = 5
robot_1.direction = 90
robot_1.sensor_range = 10

print(robot_1.motor_speed)
print(robot_1.direction)
print(robot_1.sensor_range)
2. Adding Robot Logic
Now we want to add some logic to our robot. It would be very useful to be able to control our robot, so we are going to create a control_bot method which changes the speed and direction. We are also going to create a method called adjust_sensor. This method is used to change the range of our robot’s sensors which are used to detect obstacles. Here are the steps:

Define a function within the DriveBot class which accepts two additional parameters: one for a new speed and one for a new direction
Replace the instance variables for speed and direction with the input parameters
Define another function called adjust_sensor which accepts one additional parameter
Replace the instance variable sensor_range with the input parameter
class DriveBot:
    def __init__(self):
        self.motor_speed = 0
        self.direction = 0
        self.sensor_range = 0
    
    # Add the methods here!
    def control_bot(self,new_speed,new_direction):
      self.motor_speed = new_speed
      self.direction = new_direction
    def adjust_sensor(self, new_sensor_range):
      self.sensor_range = new_sensor_range
  3. Enhanced Constructor
It can be tedious manually setting the values for each instance variable after we have created an object from the DriveBot class. We can enhance our constructor to automatically assign the values we provide to the instance variables. Instead of taking zero parameters, we are going to make the constructor take three parameters. Here is what we need to do:

Modify the constructor to take three parameters (in addition to self): one for motor_speed, one for direction, and one for sensor_range
For the first parameter, make the default value 0
For the second parameter, make the default value 180
For the third parameter, make the default value 10
Within the constructor, replace the instance variables with the variables from the input parameters
class DriveBot:
    # Update this constructor!
    def __init__(self, motor_speed= 0, direction=180, sensor_range=10 ):
        self.motor_speed = motor_speed
        self.direction = direction
        self.sensor_range = sensor_range
    
    def control_bot(self, new_speed, new_direction):
        self.motor_speed = new_speed
        self.direction = new_direction

    def adjust_sensor(self, new_sensor_range):
        self.sensor_range = new_sensor_range
4. Controlling Them All
We want to add a new feature that allows the user to control multiple robots at once. The robots should be able to all have the same latitude and longitude GPS destination coordinates as well as a setting for disabling them all called all_disabled. We can accomplish this using class variables. Here is how we can do it:

Create a new class variable within the DriveBot class called all_disabled and set it equal to False
Create a new class variable within the DriveBot class called latitude and set it equal to -999999
Create a new class variable within the DriveBot class called longitude and set it equal to -999999
Outside of the class, test the class variables by setting the longitude of all robots to 50.0, the latitude to -50.0 and all_disabled to True
class DriveBot:
  # Create the class variables!
    all_disabled = False
    latitude = -999999
    longitude = -999999
    def __init__(self, motor_speed = 0, direction = 180, sensor_range = 10):
        self.motor_speed = motor_speed
        self.direction = direction
        self.sensor_range = sensor_range
    
    def control_bot(self, new_speed, new_direction):
        self.motor_speed = new_speed
        self.direction = new_direction

    def adjust_sensor(self, new_sensor_range):
        self.sensor_range = new_sensor_range
5. Identifying Robots
In order to keep track of the robots we are creating, we want to be able to assign an ID value to each robot when it is created. If we create five robots in a row, we want the IDs of each robot to be 1, 2, 3, 4, and 5 respectively. This can be accomplished by using a class variable counter which increments and is assigned to an instance variable for the ID whenever the constructor is called. Here are the steps:

Create a new class variable in the DriveBot class called robot_count
In the constructor, increment the robot_count by 1
After incrementing the value, assign the value of robot_count to a new instance variable called id.
class DriveBot:
  # Create a counter to keep track of how many robots were created
    all_disabled = False
    latitude = -999999
    longitude = -999999
    counter = 0

    def __init__(self, motor_speed = 0, direction = 180, sensor_range = 10):
        self.motor_speed = motor_speed
        self.direction = direction
        self.sensor_range = sensor_range
        DriveBot.counter += 1
        self.id = DriveBot.counter
        # Assign an `id` to the robot when it is constructed by incrementing the counter and assigning the value to `id`
# Write Python 3 code in this online editor and run it.
print("Try programiz.pro")

def is_palindrome(word1, word2):
    if word1 == word2[::-1]:
        return True
    return False
    
print(is_palindrome("aba", "aba"))
print(is_palindrome("aba", "ab2"))

def merge_dicts(d1, d2):
    new_dict = {}
    for key1 in d1:
        if key1 in d2:
            new_dict[key1] = d1[key1] + d2[key1]
        else:
            new_dict[key1] = d1[key1]
    for key2 in d2:
        if key2 not in new_dict:
            new_dict[key2] = d2[key2]
    return new_dict
    
print(merge_dicts({'a':1,'b':2}, {'b':3,'c':4}))

def filter_range(nums, low, high):
    rage_nums = []
    for num in nums:
        if num >= low and num <= high:
            rage_nums.append(num)
    return rage_nums
    
print(filter_range([2,4,6,2,7,2,6,4,10,1,-2, 7, 24, 26], 0,5))

    
