############################################################Python Code Challenges: Control Flow
1. Not Sum To Ten
You are given two numbers stored in num1 and num2. If the sum of num1 and num2 is NOT equal to 10, then store True into a variable called not_ten, otherwise store False in not_ten.
2. Over Budget
You are given a monthly budget and some expenses and need to check if the sum of the expenses goes over budget!

First, store the total of all expenses into a variable called total.

Next, check if the total is greater than the budget. If it is, store True into a variable called over_budget, otherwise store False in over_budget.
3. Large Power
For the next code challenge, let’s add functions to the mix! We create a function that tests whether the result of taking the power of one number to another number provides an answer that is greater than 5000. We will use a conditional statement to return True if the result is greater than 5000 or return False if it is not. In order to accomplish this, we will need the following steps:

Define the function to accept two input parameters called base and exponent
Calculate the result of base to the power of exponent
Use an if statement to test if the result is greater than 5000. If it is then return True. Otherwise, return False

4. Twice As Large
In this challenge, we will determine if one number is twice as large as another number. To do this, we will compare the first number with two times the second number. Here are the steps:

Define our function with two inputs num1 and num2
Multiply the second input by 2
Use an if statement to compare the result of the last calculation with the first input
If num1 is greater then return True otherwise return False
5. Divisible By Ten
############################################################Control Flow (Advanced)
1. In Range
Let’s start the advanced challenge problems by testing if a number falls within a certain range. We will accept three parameters where the first parameter is the number we are testing, the second parameter is the lower bound and the third parameter is the upper bound of our range. These are the steps required:

Define the function to accept three numbers as parameters
Test if the number is greater than or equal to the lower bound and less than or equal to the upper bound
If this is true, return True, otherwise, return False
  def in_range(num, lower, upper):
  if (num >= lower) and (num <= upper):
    return True
  else:
    return False

  2. Same Name
We need to write a program that checks different names and determines if they are equal. We need to accept two strings and compare them. Here are the steps:

Define the function to accept two strings, your_name and my_name
Test if the two strings are equal
Return True if they are equal, otherwise return False

3. Always False
There are some situations that you normally want to avoid when programming using conditional statements. One example is a contradiction. This occurs when your condition will always be false no matter what value you pass into it. Let’s create an example of a function that contains a contradiction. It will contain a few steps:

Define the function to accept a single parameter called num
Use a combination of <, > and and to create a contradiction in an if statement.
If the condition is true, return True, otherwise return False. The trick here is that because we’ve written a contradiction, the condition should never be true, so we should expect to always return False.
def always_false(num):
  if (num > 0 and num < 0):
    return True
  else:
    return False
4. Movie Review
We want to create a function that will help us rate movies. Our function will split the ratings into different ranges and tell the user how the movie was based on the movie’s rating. Here are the steps needed:

Define our function to accept a single number called rating
If the rating is equal to or less than 5, return "Avoid at all costs!"
If the rating was less than 9, return "This one was fun."
If neither of the if statement conditions were met, return "Outstanding!"
def movie_review(rating):
  if(rating <= 5):
    return "Avoid at all costs!"
  if(rating < 9):
    return "This one was fun."
  return "Outstanding!"
5. Max Number
For the final challenge, we are going to select which number from three input values is the greatest using conditional statements. To do this, we need to check the different combinations of values to see which number is greater than the other two. Here is what we need to do:

Define a function that has three input parameters, num1, num2, and num3
Test if num1 is greater than the other two numbers
If so, return num1
Test if num2 is greater than the other two numbers
If so, return num2
Test if num3 is greater than the other two numbers
If so, return num3
If there was a tie between the two largest numbers, then return "It's a tie!"

############################################################ Python Code Challenges: Lists

1. Append Size
For the first code challenge, we are going to calculate the length of an input list and append it to the end of the original list. For example, if we have the input list [23, 42, 108], which is of length 3, the output list should be [23, 42, 108, 3]. Similarly, the output for the input list [1, 23] should be [1, 23, 2].

Here is what you need to do:

Define a function append_size() that accepts a list as its input.
Get the length of the input list.
Append the length of the list to the end of the original list.
Return the modified list.

def append_size(my_list):
  my_list.append(len(my_list))
  return my_list
2. Append Sum
For the next challenge, let’s create a function that calculates the sum of the last two elements of an input list and appends it to the end of the original list. After doing so, it repeats this process two more times and returns the resulting list.

For example, for the input list [1, 1, 2], the output list should be [1, 1, 2, 3, 5, 8]. Similarly, the output for the input list [1, 23] should be [1, 23, 24, 47, 71].

To complete the challenge, you need to implement the following:

Define the function append_sum() to accept a list as its input argument.
Add the last and second-to-last elements of the input list.
Append the calculated sum to the end of the input list.
Repeat the previous two steps two more times for the modified list.
Return the modified list.

def append_sum(my_list):
  if len(my_list) < 2:
    return "Error"
  for _ in range(3):
    two_el_sum = my_list[-2] + my_list[-1]
    my_list.append(two_el_sum)
  return my_list
3. Larger List
Let’s say we are working with two conveyor belts that contain items represented by a numerical ID. If one conveyor belt contains more items than the other, then we need to return the ID of the last item on that belt. In the case where they have the same number of items, return the last item from the first conveyor belt.

In our code, we can represent the id of the items using numbers and conveyor belts using lists. For instance, if we have two lists, [23, 12, 21] and [1, 23], representing the id of the items at two conveyor belts, the output will be 21. Similarly, for input lists [1, 7, 2, 3, 17] and [1, 23, 24, 47, 71, 83], the output will be 83. For input lists [23, 12, 21] and [1, 23, 25], the output will be 21 as both lists are of the same length.

Here are the steps you need to complete this code challenge:

Define a function that accepts two parameters for our two lists of numbers.
Check if the length of the first list is greater than or equal to the length of the second list.
If true, then return the last element from the first list. Otherwise, return the last element from the second list.

def larger_list(my_list1, my_list2):
  if len(my_list1) >= len(my_list2):
    return my_list1[-1]
  else:
    return my_list2[-1]

4. More Than N
Our factory produces a variety of different flavored snacks. The different types of snacks are represented by their id and are kept on a conveyor belt. We want to check if we have enough items of a certain snack in our inventory. For this, we need to write a Python function that does the following.

The function should accept a list of numbers representing the ids of snack on the conveyor belt as its first input, the id of snack we are looking for as its second input, and the desired number of that type of snack on the conveyor belt as its third input.
The function should return True if the snack we are searching for appears more times in the list than the desired number given in the third parameter. Otherwise, it should return False.
Following are the steps we need to implement the above scenario:

Define the function to accept three parameters: a list of numbers, a number to look for, and a number for the number of instances.
Count the number of occurrences of item i.e. the second parameter in my_list i.e. the first parameter.
If the number of occurrences is greater than n i.e. the third parameter, return True. Otherwise, return False.

def more_than_n(my_list, item, n):
  n_item = my_list.count(item)
  if n_item > n:
    return True
  return False
5. Combine Sort
Finally, let’s create a function that combines two different lists together and then sorts them. To do this, we can combine the lists with an operation and then sort using a function call. Here are the steps we need to use:

Define the function to accept two parameters, one for each list.
Combine the two lists using the + operator.
Sort the resultant list after concatenation.
Return the sorted list.
def combine_sort(my_list1, my_list2):
  my_list1 = my_list1 + my_list2

  my_list1.sort()

  return my_list1

############################################################Python Code Challenges: Loops
1. Divisible By Ten
Let’s start our code challenges with a function that counts how many numbers are divisible by ten from a list of numbers. This function will accept a list of numbers as an input parameter and use a loop to check each of the numbers in the list. Every time a number is divisible by 10, a counter will be incremented and the final count will be returned. These are the steps we need to complete this:

Define the function to accept one input parameter called nums
Initialize a counter to 0
Loop through every number in nums
Within the loop, if any of the numbers are divisible by 10, increment our counter
Return the final counter value
def divisible_by_ten(nums):
  counter = 0
  for num in nums:
    if num % 10 == 0:
      counter += 1
  return counter
2. Greetings
You are invited to a social gathering, but you are tired of greeting everyone there. Luckily we can create a function to accomplish this task for us. In this challenge, we will take a list of names and prepend the string 'Hello, ' before each name. This will require a few steps:

Define the function to accept a list of strings as a single parameter called names
Create a new list of strings
Loop through each name in names
Within the loop, concatenate 'Hello, ' and the current name together and append this new string to the new list of strings
Afterwards, return the new list of strings
def add_greetings(names):
  new_list = []
  for name in names:
    new_list.append('Hello, ' + name)
  return new_list

3. Delete Starting Even Numbers
Let’s try a tricky challenge involving removing elements from a list. This function will repeatedly remove the first element of a list until it finds an odd number or runs out of elements. It will accept a list of numbers as an input parameter and return the modified list where any even numbers at the beginning of the list are removed. To do this, we will need the following steps:

Define our function to accept a single input parameter my_list which is a list of numbers
Loop through every number in the list if there are still numbers in the list and if we haven’t hit an odd number yet
Within the loop, if the first number in the list is even, then remove the first number of the list
Once we hit an odd number or we run out of numbers, return the modified list
def delete_starting_evens(my_list):
  copy_list = my_list[:]
  for num in my_list:
    if num % 2 == 0:
      copy_list.pop(0)
    else:
      break
  return copy_list


  
