log chechout reset init alias config --global add commit status log diff .gitignore reset --hard reflog revert tag tags/
******************* CUIDADO QUE HACE JAIMICOS *******************
Check Difference To Five

Descripción: Dados dos números, comprueba si la diferencia absoluta entre ellos es diferente de 5. Guarda True en not_five, o False en caso contrario.

Ejemplo:

Input: a = 12, b = 8 → not_five = False (|12–8| == 4)

Input: a = 20, b = 14 → not_five = True (|20–14| == 6)
Multiple Of Seven

Descripción: Dada una lista de números, cuenta cuántos de ellos son múltiplos de 7 y devuelve ese conteo.

Ejemplo:

Input: [7, 14, 15, 21, 22, 28] → 4

Input: [1, 2, 3, 4, 5, 6] → 0

def multiple_seven(lst):
    return len([x for x in lst if x % 7 == 0])

Dado un texto largo, devuelve las 3 palabras más frecuentes (ignorando mayúsculas y puntuación).
Ejemplo de entrada: "Hello, hello! How are you? Are you okay?"
# no special characters
def three_most_common(sentence):
    most_common_dict = {}
    three_common_list = []
    word_list = sentence.lower().split()

    for word in word_list:
        if word not in most_common_dict:
            most_common_dict[word] = 1
        else:
            most_common_dict[word] += 1

    sorted_items_desc = sorted(most_common_dict.items(), key=lambda item: item[1], reverse=True)
    sorted_dict_desc = dict(sorted_items_desc)
    print(sorted_dict_desc)

    for i in range(3):
        for w in sorted_dict_desc:
            del sorted_dict_desc[w]
            three_common_list.append(w)
            break
    
    return three_common_list

4.
Dados dos textos, encuentra las palabras que aparecen en ambos textos, pero no aparecen más de una vez en cada uno.

def find_one_appearance_both_text(text1, text2):
    text1 = text1.lower().split()
    text2= text2.lower().split()

    unique_word_list = []

    for word in text1:
        if word in text2 and text1.count(word) == 1 and text2.count(word) == 1:
            unique_word_list.append(word)
    

    for word in text2:
        if word in text1 and text1.count(word) == 1 and text2.count(word) == 1:
            unique_word_list.append(word)
    
      

    return set(unique_word_list)



texto1 = """
In the quiet town of Eldermoor, a librarian named Clara discovered an old, dusty book hidden between the shelves.
She opened it, revealing a map and strange symbols. Clara, curious and brave, followed the map deep into the forest.
There, she encountered a wolf—not a normal one, but a silver creature with glowing eyes.
It spoke, offering knowledge in exchange for a name. Clara accepted.
"""

texto2 = """
Miles away from Eldermoor, in the city of Graystone, a historian uncovered a sealed scroll in an attic.
The scroll detailed the journey of a silver wolf and a brave girl who entered a forgotten forest.
Legends say the wolf could speak, revealing knowledge long lost to mankind.
But no one remembers her name, only that she never returned.
"""

print(find_one_appearance_both_text(texto1, texto2))


Dada una lista de nombres (con posibles repeticiones y distintos formatos de mayúsculas), devuelve cuántos nombres únicos hay ignorando mayúsculas/minúsculas.

def unique_list(name_list):
    
    lower = []

    for name in name_list:
        lower.append(name.lower()) 

    return len(set(lower))

print(unique_list(["PePe", "pEPe", "Uriel"]))

